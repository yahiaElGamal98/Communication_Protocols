
Sprint6_COMM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000870  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060f  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000565  00000000  00000000  000010cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00001634  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000431  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026e  00000000  00000000  00001b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001dcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6f 00 	call	0xde	; 0xde <main>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_init>:
	else
	{
		*u8_data=TWDR;
		return E_OK;
	}	
}
  6c:	81 b1       	in	r24, 0x01	; 1
  6e:	8c 7f       	andi	r24, 0xFC	; 252
  70:	81 b9       	out	0x01, r24	; 1
  72:	82 e0       	ldi	r24, 0x02	; 2
  74:	80 b9       	out	0x00, r24	; 0
  76:	08 95       	ret

00000078 <I2C_masterStartWrite>:
  78:	94 ea       	ldi	r25, 0xA4	; 164
  7a:	96 bf       	out	0x36, r25	; 54
  7c:	06 b6       	in	r0, 0x36	; 54
  7e:	07 fe       	sbrs	r0, 7
  80:	fd cf       	rjmp	.-6      	; 0x7c <I2C_masterStartWrite+0x4>
  82:	91 b1       	in	r25, 0x01	; 1
  84:	98 7f       	andi	r25, 0xF8	; 248
  86:	98 30       	cpi	r25, 0x08	; 8
  88:	61 f4       	brne	.+24     	; 0xa2 <I2C_masterStartWrite+0x2a>
  8a:	83 b9       	out	0x03, r24	; 3
  8c:	84 e8       	ldi	r24, 0x84	; 132
  8e:	86 bf       	out	0x36, r24	; 54
  90:	06 b6       	in	r0, 0x36	; 54
  92:	07 fe       	sbrs	r0, 7
  94:	fd cf       	rjmp	.-6      	; 0x90 <I2C_masterStartWrite+0x18>
  96:	81 b1       	in	r24, 0x01	; 1
  98:	88 7f       	andi	r24, 0xF8	; 248
  9a:	88 31       	cpi	r24, 0x18	; 24
  9c:	21 f0       	breq	.+8      	; 0xa6 <I2C_masterStartWrite+0x2e>
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	08 95       	ret
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	08 95       	ret
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	08 95       	ret

000000aa <I2C_masterSendData>:
  aa:	83 b9       	out	0x03, r24	; 3
  ac:	84 e8       	ldi	r24, 0x84	; 132
  ae:	86 bf       	out	0x36, r24	; 54
  b0:	06 b6       	in	r0, 0x36	; 54
  b2:	07 fe       	sbrs	r0, 7
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <I2C_masterSendData+0x6>
  b6:	81 b1       	in	r24, 0x01	; 1
  b8:	88 7f       	andi	r24, 0xF8	; 248
  ba:	88 32       	cpi	r24, 0x28	; 40
  bc:	31 f0       	breq	.+12     	; 0xca <I2C_masterSendData+0x20>
  be:	81 b1       	in	r24, 0x01	; 1
  c0:	88 7f       	andi	r24, 0xF8	; 248
  c2:	80 33       	cpi	r24, 0x30	; 48
  c4:	21 f4       	brne	.+8      	; 0xce <I2C_masterSendData+0x24>
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	08 95       	ret
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	08 95       	ret
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	08 95       	ret

000000d2 <I2C_stop>:
void I2C_stop()
{
	TWCR=(HIGH<<TWINT) | (HIGH<<TWSTO) |(HIGH<<TWEN);
  d2:	84 e9       	ldi	r24, 0x94	; 148
  d4:	86 bf       	out	0x36, r24	; 54
	while(LOW==((TWCR&(HIGH<<TWSTO))>>TWSTO));
  d6:	06 b6       	in	r0, 0x36	; 54
  d8:	04 fe       	sbrs	r0, 4
  da:	fd cf       	rjmp	.-6      	; 0xd6 <I2C_stop+0x4>
}
  dc:	08 95       	ret

000000de <main>:


int main(void)
{
	uint8_t u8_send=0x86;
	I2C_init();
  de:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_init>
    /* Replace with your application code */
	while (1) 
    {
		I2C_masterStartWrite(SLAVE_ADD);
  e2:	80 e1       	ldi	r24, 0x10	; 16
  e4:	0e 94 3c 00 	call	0x78	; 0x78 <I2C_masterStartWrite>
		I2C_masterSendData(u8_send);
  e8:	86 e8       	ldi	r24, 0x86	; 134
  ea:	0e 94 55 00 	call	0xaa	; 0xaa <I2C_masterSendData>
		I2C_stop();
  ee:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_stop>
  f2:	f7 cf       	rjmp	.-18     	; 0xe2 <main+0x4>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
