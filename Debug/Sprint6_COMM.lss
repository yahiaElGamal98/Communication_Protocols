
Sprint6_COMM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  000005aa  0000063e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000ba  008000ba  00000698  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001198  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000934  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ee  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000500  00000000  00000000  00002c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000748  00000000  00000000  00003188  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000038d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3b       	cpi	r26, 0xBA	; 186
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa eb       	ldi	r26, 0xBA	; 186
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3b       	cpi	r26, 0xBC	; 188
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 31 02 	call	0x462	; 0x462 <main>
  8a:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_init>:
#include "../../01-LIB/Registers.h"
#include "DIO.h"


void DIO_init(ST_DIO_config_t* configurations)   
{
  92:	fc 01       	movw	r30, r24
	switch(configurations->PORT)
  94:	90 81       	ld	r25, Z
  96:	92 34       	cpi	r25, 0x42	; 66
  98:	31 f1       	breq	.+76     	; 0xe6 <DIO_init+0x54>
  9a:	18 f4       	brcc	.+6      	; 0xa2 <DIO_init+0x10>
  9c:	91 34       	cpi	r25, 0x41	; 65
  9e:	39 f0       	breq	.+14     	; 0xae <DIO_init+0x1c>
  a0:	08 95       	ret
  a2:	93 34       	cpi	r25, 0x43	; 67
  a4:	e1 f1       	breq	.+120    	; 0x11e <DIO_init+0x8c>
  a6:	94 34       	cpi	r25, 0x44	; 68
  a8:	09 f4       	brne	.+2      	; 0xac <DIO_init+0x1a>
  aa:	55 c0       	rjmp	.+170    	; 0x156 <DIO_init+0xc4>
  ac:	08 95       	ret
	{
		case 'A':
			if(OUTPUT==configurations->DDRx) //set bit high if OUTPUT
  ae:	82 81       	ldd	r24, Z+2	; 0x02
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	61 f4       	brne	.+24     	; 0xcc <DIO_init+0x3a>
			{
				PORTA_DIR|=HIGH<<configurations->Px;
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	01 80       	ldd	r0, Z+1	; 0x01
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_init+0x30>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_init+0x2c>
  c6:	82 2b       	or	r24, r18
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
			}
			else //clear bit (low) if INPUT
			{
				PORTA_DIR&=~(HIGH<<configurations->Px);
  cc:	2a b3       	in	r18, 0x1a	; 26
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 80       	ldd	r0, Z+1	; 0x01
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_init+0x48>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_init+0x44>
  de:	80 95       	com	r24
  e0:	82 23       	and	r24, r18
  e2:	8a bb       	out	0x1a, r24	; 26
  e4:	08 95       	ret
			}
			break;
		case 'B':
			if(OUTPUT==configurations->DDRx)
  e6:	82 81       	ldd	r24, Z+2	; 0x02
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	61 f4       	brne	.+24     	; 0x104 <DIO_init+0x72>
			{
				PORTB_DIR|=HIGH<<configurations->Px;
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	01 80       	ldd	r0, Z+1	; 0x01
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_init+0x68>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_init+0x64>
  fe:	82 2b       	or	r24, r18
 100:	87 bb       	out	0x17, r24	; 23
 102:	08 95       	ret
			}
			else
			{
				PORTB_DIR&=~(HIGH<<configurations->Px);
 104:	27 b3       	in	r18, 0x17	; 23
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 80       	ldd	r0, Z+1	; 0x01
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_init+0x80>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_init+0x7c>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
			}
			break;
		case 'C':
			if(OUTPUT==configurations->DDRx)
 11e:	82 81       	ldd	r24, Z+2	; 0x02
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	61 f4       	brne	.+24     	; 0x13c <DIO_init+0xaa>
			{
				PORTC_DIR|=HIGH<<configurations->Px;
 124:	24 b3       	in	r18, 0x14	; 20
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 80       	ldd	r0, Z+1	; 0x01
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_init+0xa0>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_init+0x9c>
 136:	82 2b       	or	r24, r18
 138:	84 bb       	out	0x14, r24	; 20
 13a:	08 95       	ret
			}
			else
			{
				PORTC_DIR&=~(HIGH<<configurations->Px);
 13c:	24 b3       	in	r18, 0x14	; 20
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	01 80       	ldd	r0, Z+1	; 0x01
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_init+0xb8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_init+0xb4>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	84 bb       	out	0x14, r24	; 20
 154:	08 95       	ret
			}
			break;
		case 'D':
			if(OUTPUT==configurations->DDRx)
 156:	82 81       	ldd	r24, Z+2	; 0x02
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	61 f4       	brne	.+24     	; 0x174 <DIO_init+0xe2>
			{
				PORTD_DIR|=HIGH<<configurations->Px;
 15c:	21 b3       	in	r18, 0x11	; 17
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	01 80       	ldd	r0, Z+1	; 0x01
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_init+0xd8>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_init+0xd4>
 16e:	82 2b       	or	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret
			}
			else
			{
				PORTD_DIR&=~(HIGH<<configurations->Px);
 174:	21 b3       	in	r18, 0x11	; 17
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	01 80       	ldd	r0, Z+1	; 0x01
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_init+0xf0>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_init+0xec>
 186:	80 95       	com	r24
 188:	82 23       	and	r24, r18
 18a:	81 bb       	out	0x11, r24	; 17
 18c:	08 95       	ret

0000018e <DIO_write>:
	}
}

void DIO_write(uint8_t port, EN_pins pin, uint8_t data)
{
	switch(port)
 18e:	82 34       	cpi	r24, 0x42	; 66
 190:	19 f1       	breq	.+70     	; 0x1d8 <DIO_write+0x4a>
 192:	18 f4       	brcc	.+6      	; 0x19a <DIO_write+0xc>
 194:	81 34       	cpi	r24, 0x41	; 65
 196:	39 f0       	breq	.+14     	; 0x1a6 <DIO_write+0x18>
 198:	08 95       	ret
 19a:	83 34       	cpi	r24, 0x43	; 67
 19c:	b1 f1       	breq	.+108    	; 0x20a <DIO_write+0x7c>
 19e:	84 34       	cpi	r24, 0x44	; 68
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <DIO_write+0x16>
 1a2:	4c c0       	rjmp	.+152    	; 0x23c <DIO_write+0xae>
 1a4:	08 95       	ret
	{
		case 'A':
		if(HIGH==data)
 1a6:	41 30       	cpi	r20, 0x01	; 1
 1a8:	59 f4       	brne	.+22     	; 0x1c0 <DIO_write+0x32>
		{
			PORTA_DATA|=HIGH<<pin;	//Set bit if data is high
 1aa:	2b b3       	in	r18, 0x1b	; 27
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_write+0x28>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_write+0x24>
 1ba:	82 2b       	or	r24, r18
 1bc:	8b bb       	out	0x1b, r24	; 27
 1be:	08 95       	ret
		}
		else
		{
			PORTA_DATA&=~(HIGH<<pin);	//Clear bit if data is low
 1c0:	2b b3       	in	r18, 0x1b	; 27
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write+0x3e>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write+0x3a>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	8b bb       	out	0x1b, r24	; 27
 1d6:	08 95       	ret
		}
		break;
		case 'B':
		if(HIGH==data)
 1d8:	41 30       	cpi	r20, 0x01	; 1
 1da:	59 f4       	brne	.+22     	; 0x1f2 <DIO_write+0x64>
		{
			PORTB_DATA|=HIGH<<pin;
 1dc:	28 b3       	in	r18, 0x18	; 24
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_write+0x5a>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_write+0x56>
 1ec:	82 2b       	or	r24, r18
 1ee:	88 bb       	out	0x18, r24	; 24
 1f0:	08 95       	ret
		}
		else
		{
			PORTB_DATA&=~(HIGH<<pin);
 1f2:	28 b3       	in	r18, 0x18	; 24
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x70>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x6c>
 202:	80 95       	com	r24
 204:	82 23       	and	r24, r18
 206:	88 bb       	out	0x18, r24	; 24
 208:	08 95       	ret
		}
		break;
		case 'C':
		if(HIGH==data)
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	59 f4       	brne	.+22     	; 0x224 <DIO_write+0x96>
		{
			PORTC_DATA|=HIGH<<pin;
 20e:	25 b3       	in	r18, 0x15	; 21
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_write+0x8c>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_write+0x88>
 21e:	82 2b       	or	r24, r18
 220:	85 bb       	out	0x15, r24	; 21
 222:	08 95       	ret
		}
		else
		{
			PORTC_DATA&=~(HIGH<<pin);
 224:	25 b3       	in	r18, 0x15	; 21
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0xa2>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0x9e>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	85 bb       	out	0x15, r24	; 21
 23a:	08 95       	ret
		}
		break;
		case 'D':
		if(HIGH==data)
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	59 f4       	brne	.+22     	; 0x256 <DIO_write+0xc8>
		{
			PORTD_DATA|=HIGH<<pin;
 240:	22 b3       	in	r18, 0x12	; 18
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_write+0xbe>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_write+0xba>
 250:	82 2b       	or	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret
		}
		else
		{
			PORTD_DATA&=~(HIGH<<pin);
 256:	22 b3       	in	r18, 0x12	; 18
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_write+0xd4>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_write+0xd0>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	82 bb       	out	0x12, r24	; 18
 26c:	08 95       	ret

0000026e <__vector_13>:
	// select UCSRC register and configure 8 bits of data in a frame with 1 stop bit and user configured parity
	UBRRH_UCSRC = (HIGH<<URSEL) | (PARITY_MODE<<UPM0) | (STOP_MODE<<USBS) | (HIGH<<UCSZ1) | (HIGH <<UCSZ0); 
}
void setRxCompleteCallback(void (*callback)(void))
{
	RxCompleteCallback=callback;
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
 290:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <__data_end>
 294:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <__data_end+0x1>
 298:	30 97       	sbiw	r30, 0x00	; 0
 29a:	09 f0       	breq	.+2      	; 0x29e <__vector_13+0x30>
 29c:	09 95       	icall
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	bf 91       	pop	r27
 2a4:	af 91       	pop	r26
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	7f 91       	pop	r23
 2ac:	6f 91       	pop	r22
 2ae:	5f 91       	pop	r21
 2b0:	4f 91       	pop	r20
 2b2:	3f 91       	pop	r19
 2b4:	2f 91       	pop	r18
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <UART_init>:
 2c0:	83 e3       	ldi	r24, 0x33	; 51
 2c2:	89 b9       	out	0x09, r24	; 9
 2c4:	10 bc       	out	0x20, r1	; 32
 2c6:	88 e1       	ldi	r24, 0x18	; 24
 2c8:	8a b9       	out	0x0a, r24	; 10
 2ca:	86 e8       	ldi	r24, 0x86	; 134
 2cc:	80 bd       	out	0x20, r24	; 32
 2ce:	08 95       	ret

000002d0 <UART_receiveChar>:
}
EN_ErrorStatus_t UART_receiveChar(void* pvid_val)
{
	EN_ErrorStatus_t loc_error;
	if(NULL_PTR!=pvid_val)
 2d0:	00 97       	sbiw	r24, 0x00	; 0
 2d2:	39 f0       	breq	.+14     	; 0x2e2 <UART_receiveChar+0x12>
	{
		while(LOW==((UCSRA&(HIGH<<RXC))>>RXC))
 2d4:	5f 9b       	sbis	0x0b, 7	; 11
 2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <UART_receiveChar+0x4>
		{
			//WAIT FOR RECEIVE COMPLETE FLAG
		}
		*((uint8_t*)pvid_val)=UDR;
 2d8:	2c b1       	in	r18, 0x0c	; 12
 2da:	fc 01       	movw	r30, r24
 2dc:	20 83       	st	Z, r18
		loc_error=EOK;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	08 95       	ret
	}
	else
	{
		loc_error=ENOK;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
	}
	return loc_error;
	
}
 2e4:	08 95       	ret

000002e6 <UART_sendChar>:
void UART_sendChar(uint8_t u8_char)
{
	while(LOW==((UCSRA&(HIGH<<UDRE))>>UDRE))
 2e6:	5d 9b       	sbis	0x0b, 5	; 11
 2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <UART_sendChar>
	{
		//WAIT FOR DATA REGISTER EMPTY FLAG
	}
	UDR=u8_char;
 2ea:	8c b9       	out	0x0c, r24	; 12
 2ec:	08 95       	ret

000002ee <UART_sendString>:
}
EN_ErrorStatus_t UART_sendString(const void* pvid_str)
{
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
	EN_ErrorStatus_t loc_error;
	if(NULL_PTR!=pvid_str)
 2f4:	00 97       	sbiw	r24, 0x00	; 0
 2f6:	31 f4       	brne	.+12     	; 0x304 <UART_sendString+0x16>
		}
		loc_error=EOK;
	}
	else
	{
		loc_error=ENOK;
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	15 c0       	rjmp	.+42     	; 0x326 <UART_sendString+0x38>
		uint8_t u8_index=0;
		uint8_t *pu8_str=(uint8_t*)pvid_str;
		//continue sending till you meet any terminating character
		while((NULL!=pu8_str[u8_index])&&(CARRIAGE_RETURN!=pu8_str[u8_index])&&(NEW_LINE!=pu8_str[u8_index]))
		{
			UART_sendChar(pu8_str[u8_index]);
 2fc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_sendChar>
			u8_index++;
 300:	cf 5f       	subi	r28, 0xFF	; 255
 302:	02 c0       	rjmp	.+4      	; 0x308 <UART_sendString+0x1a>
 304:	8c 01       	movw	r16, r24
 306:	c0 e0       	ldi	r28, 0x00	; 0
	if(NULL_PTR!=pvid_str)
	{
		uint8_t u8_index=0;
		uint8_t *pu8_str=(uint8_t*)pvid_str;
		//continue sending till you meet any terminating character
		while((NULL!=pu8_str[u8_index])&&(CARRIAGE_RETURN!=pu8_str[u8_index])&&(NEW_LINE!=pu8_str[u8_index]))
 308:	f8 01       	movw	r30, r16
 30a:	ec 0f       	add	r30, r28
 30c:	f1 1d       	adc	r31, r1
 30e:	80 81       	ld	r24, Z
 310:	88 23       	and	r24, r24
 312:	31 f0       	breq	.+12     	; 0x320 <UART_sendString+0x32>
 314:	8d 30       	cpi	r24, 0x0D	; 13
 316:	31 f0       	breq	.+12     	; 0x324 <UART_sendString+0x36>
 318:	8a 30       	cpi	r24, 0x0A	; 10
 31a:	81 f7       	brne	.-32     	; 0x2fc <UART_sendString+0xe>
		{
			UART_sendChar(pu8_str[u8_index]);
			u8_index++;
		}
		loc_error=EOK;
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	03 c0       	rjmp	.+6      	; 0x326 <UART_sendString+0x38>
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	01 c0       	rjmp	.+2      	; 0x326 <UART_sendString+0x38>
 324:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		loc_error=ENOK;
	}
	return loc_error;
}
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	08 95       	ret

0000032e <UART_receiveString>:
EN_ErrorStatus_t UART_receiveString(void* pvid_str)
{
 32e:	ef 92       	push	r14
 330:	ff 92       	push	r15
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
	EN_ErrorStatus_t loc_error;
	if(NULL_PTR!=pvid_str)
 338:	00 97       	sbiw	r24, 0x00	; 0
 33a:	e1 f4       	brne	.+56     	; 0x374 <UART_receiveString+0x46>
		}
		loc_error=EOK;
	}
	else
	{
		loc_error=ENOK;
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	1f c0       	rjmp	.+62     	; 0x37e <UART_receiveString+0x50>
		uint8_t u8_index=0;
		uint8_t *pu8_str = (uint8_t*)pvid_str;
		//max length of received string is 255 as per requirements
		while(u8_index<MAX_CHAR)
		{
			UART_receiveChar((void*)(&pu8_str[u8_index]));
 340:	87 01       	movw	r16, r14
 342:	0c 0f       	add	r16, r28
 344:	11 1d       	adc	r17, r1
 346:	c8 01       	movw	r24, r16
 348:	0e 94 68 01 	call	0x2d0	; 0x2d0 <UART_receiveChar>
			//continue receiving till you meet a terminating character
			if(NULL==pu8_str[u8_index] ||NEW_LINE==pu8_str[u8_index] ||CARRIAGE_RETURN==pu8_str[u8_index])
 34c:	f8 01       	movw	r30, r16
 34e:	90 81       	ld	r25, Z
 350:	99 23       	and	r25, r25
 352:	21 f0       	breq	.+8      	; 0x35c <UART_receiveString+0x2e>
 354:	9a 30       	cpi	r25, 0x0A	; 10
 356:	11 f0       	breq	.+4      	; 0x35c <UART_receiveString+0x2e>
 358:	9d 30       	cpi	r25, 0x0D	; 13
 35a:	21 f4       	brne	.+8      	; 0x364 <UART_receiveString+0x36>
			{
				//replace that character with NULL
				pu8_str[u8_index]=NULL;
 35c:	f8 01       	movw	r30, r16
 35e:	10 82       	st	Z, r1
			else
			{
				u8_index++;
			}
		}
		loc_error=EOK;
 360:	81 e0       	ldi	r24, 0x01	; 1
			//continue receiving till you meet a terminating character
			if(NULL==pu8_str[u8_index] ||NEW_LINE==pu8_str[u8_index] ||CARRIAGE_RETURN==pu8_str[u8_index])
			{
				//replace that character with NULL
				pu8_str[u8_index]=NULL;
				break;
 362:	0d c0       	rjmp	.+26     	; 0x37e <UART_receiveString+0x50>
			}
			//force exit and terminate with NULL if MAX SIZE reached
			else if ((MAX_CHAR-1)==u8_index)
 364:	ce 3f       	cpi	r28, 0xFE	; 254
 366:	21 f4       	brne	.+8      	; 0x370 <UART_receiveString+0x42>
			{
				pu8_str[u8_index]=NULL;
 368:	f8 01       	movw	r30, r16
 36a:	10 82       	st	Z, r1
			else
			{
				u8_index++;
			}
		}
		loc_error=EOK;
 36c:	81 e0       	ldi	r24, 0x01	; 1
			}
			//force exit and terminate with NULL if MAX SIZE reached
			else if ((MAX_CHAR-1)==u8_index)
			{
				pu8_str[u8_index]=NULL;
				break;
 36e:	07 c0       	rjmp	.+14     	; 0x37e <UART_receiveString+0x50>
			}
			else
			{
				u8_index++;
 370:	cf 5f       	subi	r28, 0xFF	; 255
 372:	02 c0       	rjmp	.+4      	; 0x378 <UART_receiveString+0x4a>
 374:	7c 01       	movw	r14, r24
 376:	c0 e0       	ldi	r28, 0x00	; 0
	if(NULL_PTR!=pvid_str)
	{
		uint8_t u8_index=0;
		uint8_t *pu8_str = (uint8_t*)pvid_str;
		//max length of received string is 255 as per requirements
		while(u8_index<MAX_CHAR)
 378:	cf 3f       	cpi	r28, 0xFF	; 255
 37a:	11 f7       	brne	.-60     	; 0x340 <UART_receiveString+0x12>
			else
			{
				u8_index++;
			}
		}
		loc_error=EOK;
 37c:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		loc_error=ENOK;
	}
	return loc_error;	
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	ff 90       	pop	r15
 386:	ef 90       	pop	r14
 388:	08 95       	ret

0000038a <LED_init>:
ST_DIO_config_t gst_LED2 = {'B',P6,OUTPUT};
ST_DIO_config_t gst_LED3 = {'B',P7,OUTPUT};

void LED_init(EN_LED led_num)
{
	switch(led_num)
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	59 f0       	breq	.+22     	; 0x3a4 <LED_init+0x1a>
 38e:	28 f0       	brcs	.+10     	; 0x39a <LED_init+0x10>
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	69 f0       	breq	.+26     	; 0x3ae <LED_init+0x24>
 394:	83 30       	cpi	r24, 0x03	; 3
 396:	81 f0       	breq	.+32     	; 0x3b8 <LED_init+0x2e>
 398:	08 95       	ret
	{
		case LED0: DIO_init(&gst_LED0);break;
 39a:	89 e6       	ldi	r24, 0x69	; 105
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
 3a2:	08 95       	ret
		case LED1: DIO_init(&gst_LED1);break;
 3a4:	86 e6       	ldi	r24, 0x66	; 102
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
 3ac:	08 95       	ret
		case LED2: DIO_init(&gst_LED2);break;
 3ae:	83 e6       	ldi	r24, 0x63	; 99
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
 3b6:	08 95       	ret
		case LED3: DIO_init(&gst_LED3);break;
 3b8:	80 e6       	ldi	r24, 0x60	; 96
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_init>
 3c0:	08 95       	ret

000003c2 <LED_ON>:
		default: break;
	}
}
void LED_ON(EN_LED led_num)
{
	switch(led_num)
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	71 f0       	breq	.+28     	; 0x3e2 <LED_ON+0x20>
 3c6:	28 f0       	brcs	.+10     	; 0x3d2 <LED_ON+0x10>
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	99 f0       	breq	.+38     	; 0x3f2 <LED_ON+0x30>
 3cc:	83 30       	cpi	r24, 0x03	; 3
 3ce:	c9 f0       	breq	.+50     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3d0:	08 95       	ret
	{
		case LED0: DIO_write(gst_LED0.PORT,gst_LED0.Px,HIGH);break;
 3d2:	e9 e6       	ldi	r30, 0x69	; 105
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	61 81       	ldd	r22, Z+1	; 0x01
 3da:	80 81       	ld	r24, Z
 3dc:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_write>
 3e0:	08 95       	ret
		case LED1: DIO_write(gst_LED1.PORT,gst_LED1.Px,HIGH);break;
 3e2:	e6 e6       	ldi	r30, 0x66	; 102
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	61 81       	ldd	r22, Z+1	; 0x01
 3ea:	80 81       	ld	r24, Z
 3ec:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_write>
 3f0:	08 95       	ret
		case LED2: DIO_write(gst_LED2.PORT,gst_LED2.Px,HIGH);break;
 3f2:	e3 e6       	ldi	r30, 0x63	; 99
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	41 e0       	ldi	r20, 0x01	; 1
 3f8:	61 81       	ldd	r22, Z+1	; 0x01
 3fa:	80 81       	ld	r24, Z
 3fc:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_write>
 400:	08 95       	ret
		case LED3: DIO_write(gst_LED3.PORT,gst_LED3.Px,HIGH);break;
 402:	e0 e6       	ldi	r30, 0x60	; 96
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	61 81       	ldd	r22, Z+1	; 0x01
 40a:	80 81       	ld	r24, Z
 40c:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_write>
 410:	08 95       	ret

00000412 <LED_OFF>:
		default: break;
	}
}
void LED_OFF(EN_LED led_num)
{
	switch(led_num)
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	71 f0       	breq	.+28     	; 0x432 <LED_OFF+0x20>
 416:	28 f0       	brcs	.+10     	; 0x422 <LED_OFF+0x10>
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	99 f0       	breq	.+38     	; 0x442 <LED_OFF+0x30>
 41c:	83 30       	cpi	r24, 0x03	; 3
 41e:	c9 f0       	breq	.+50     	; 0x452 <LED_OFF+0x40>
 420:	08 95       	ret
	{
		case LED0: DIO_write(gst_LED0.PORT,gst_LED0.Px,LOW);break;
 422:	e9 e6       	ldi	r30, 0x69	; 105
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	61 81       	ldd	r22, Z+1	; 0x01
 42a:	80 81       	ld	r24, Z
 42c:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_write>
 430:	08 95       	ret
		case LED1: DIO_write(gst_LED1.PORT,gst_LED1.Px,LOW);break;
 432:	e6 e6       	ldi	r30, 0x66	; 102
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	61 81       	ldd	r22, Z+1	; 0x01
 43a:	80 81       	ld	r24, Z
 43c:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_write>
 440:	08 95       	ret
		case LED2: DIO_write(gst_LED2.PORT,gst_LED2.Px,LOW);break;
 442:	e3 e6       	ldi	r30, 0x63	; 99
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	61 81       	ldd	r22, Z+1	; 0x01
 44a:	80 81       	ld	r24, Z
 44c:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_write>
 450:	08 95       	ret
		case LED3: DIO_write(gst_LED3.PORT,gst_LED3.Px,LOW);break;
 452:	e0 e6       	ldi	r30, 0x60	; 96
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	61 81       	ldd	r22, Z+1	; 0x01
 45a:	80 81       	ld	r24, Z
 45c:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_write>
 460:	08 95       	ret

00000462 <main>:
#include "./03-HAL/LED/LED.h"
#include "./02-MCAL/UART/UART_interface.h"
#include <string.h>

int main(void)
{
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	cf 5f       	subi	r28, 0xFF	; 255
 46c:	d1 09       	sbc	r29, r1
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	f8 94       	cli
 472:	de bf       	out	0x3e, r29	; 62
 474:	0f be       	out	0x3f, r0	; 63
 476:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_val[255];
	void *ptr =NULL_PTR;
	ptr=u8_val;
	UART_init();
 478:	0e 94 60 01 	call	0x2c0	; 0x2c0 <UART_init>
	LED_init(LED0);
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_init>
	LED_init(LED1);
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_init>
	LED_init(LED2);
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_init>
    /* Replace with your application code */
    while (1) 
    {
		UART_sendString((void*)("ENTER A COMMAND : "));
 48e:	8c e6       	ldi	r24, 0x6C	; 108
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_sendString>
		UART_receiveString(ptr);
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	0e 94 97 01 	call	0x32e	; 0x32e <UART_receiveString>
		UART_sendString(ptr);
 49e:	ce 01       	movw	r24, r28
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_sendString>
		if(strcmp((const char*)ptr,(const char*)("START"))==0)
 4a6:	6f e7       	ldi	r22, 0x7F	; 127
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	ce 01       	movw	r24, r28
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	0e 94 ca 02 	call	0x594	; 0x594 <strcmp>
 4b2:	89 2b       	or	r24, r25
 4b4:	a1 f4       	brne	.+40     	; 0x4de <main+0x7c>
		{
			LED_ON(LED0);
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_ON>
			LED_OFF(LED1);
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	0e 94 09 02 	call	0x412	; 0x412 <LED_OFF>
			LED_OFF(LED2);
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	0e 94 09 02 	call	0x412	; 0x412 <LED_OFF>
			UART_sendChar('\n');
 4c8:	8a e0       	ldi	r24, 0x0A	; 10
 4ca:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_sendChar>
			UART_sendChar('\r');
 4ce:	8d e0       	ldi	r24, 0x0D	; 13
 4d0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_sendChar>
			UART_sendString((void*)("LED 0 IS ON"));	
 4d4:	85 e8       	ldi	r24, 0x85	; 133
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_sendString>
 4dc:	54 c0       	rjmp	.+168    	; 0x586 <main+0x124>
		}
		else if(strcmp((const char *)ptr,"WAIT")==0)
 4de:	61 e9       	ldi	r22, 0x91	; 145
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	ce 01       	movw	r24, r28
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	0e 94 ca 02 	call	0x594	; 0x594 <strcmp>
 4ea:	89 2b       	or	r24, r25
 4ec:	a1 f4       	brne	.+40     	; 0x516 <main+0xb4>
		{
			LED_ON(LED1);
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_ON>
			LED_OFF(LED0);
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 09 02 	call	0x412	; 0x412 <LED_OFF>
			LED_OFF(LED2);
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	0e 94 09 02 	call	0x412	; 0x412 <LED_OFF>
			UART_sendChar('\n');
 500:	8a e0       	ldi	r24, 0x0A	; 10
 502:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_sendChar>
			UART_sendChar('\r');
 506:	8d e0       	ldi	r24, 0x0D	; 13
 508:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_sendChar>
			UART_sendString((void*)"LED 1 IS ON");
 50c:	86 e9       	ldi	r24, 0x96	; 150
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_sendString>
 514:	38 c0       	rjmp	.+112    	; 0x586 <main+0x124>
		}
		else if(strcmp((const char *)ptr,"STOP")==0)
 516:	62 ea       	ldi	r22, 0xA2	; 162
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	ce 01       	movw	r24, r28
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	0e 94 ca 02 	call	0x594	; 0x594 <strcmp>
 522:	89 2b       	or	r24, r25
 524:	a1 f4       	brne	.+40     	; 0x54e <main+0xec>
		{
			LED_ON(LED2);
 526:	82 e0       	ldi	r24, 0x02	; 2
 528:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_ON>
			LED_OFF(LED1);
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	0e 94 09 02 	call	0x412	; 0x412 <LED_OFF>
			LED_OFF(LED0);
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	0e 94 09 02 	call	0x412	; 0x412 <LED_OFF>
			UART_sendChar('\n');
 538:	8a e0       	ldi	r24, 0x0A	; 10
 53a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_sendChar>
			UART_sendChar('\r');
 53e:	8d e0       	ldi	r24, 0x0D	; 13
 540:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_sendChar>
			UART_sendString((void*)"LED 2 IS ON");
 544:	87 ea       	ldi	r24, 0xA7	; 167
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_sendString>
 54c:	1c c0       	rjmp	.+56     	; 0x586 <main+0x124>
		}
		else if(strcmp((const char *)u8_val,"AT")==0)
 54e:	63 eb       	ldi	r22, 0xB3	; 179
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	ce 01       	movw	r24, r28
 554:	01 96       	adiw	r24, 0x01	; 1
 556:	0e 94 ca 02 	call	0x594	; 0x594 <strcmp>
 55a:	89 2b       	or	r24, r25
 55c:	59 f4       	brne	.+22     	; 0x574 <main+0x112>
		{
			UART_sendChar('\n');
 55e:	8a e0       	ldi	r24, 0x0A	; 10
 560:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_sendChar>
			UART_sendChar('\r');
 564:	8d e0       	ldi	r24, 0x0D	; 13
 566:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_sendChar>
			UART_sendString((void*)"OK");
 56a:	86 eb       	ldi	r24, 0xB6	; 182
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_sendString>
 572:	09 c0       	rjmp	.+18     	; 0x586 <main+0x124>
		}
		else
		{
			LED_OFF(LED2);
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	0e 94 09 02 	call	0x412	; 0x412 <LED_OFF>
			LED_OFF(LED1);
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	0e 94 09 02 	call	0x412	; 0x412 <LED_OFF>
			LED_OFF(LED0);
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	0e 94 09 02 	call	0x412	; 0x412 <LED_OFF>
		}
		UART_sendChar('\n');
 586:	8a e0       	ldi	r24, 0x0A	; 10
 588:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_sendChar>
		UART_sendChar('\r');
 58c:	8d e0       	ldi	r24, 0x0D	; 13
 58e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_sendChar>
    }
 592:	7d cf       	rjmp	.-262    	; 0x48e <main+0x2c>

00000594 <strcmp>:
 594:	fb 01       	movw	r30, r22
 596:	dc 01       	movw	r26, r24
 598:	8d 91       	ld	r24, X+
 59a:	01 90       	ld	r0, Z+
 59c:	80 19       	sub	r24, r0
 59e:	01 10       	cpse	r0, r1
 5a0:	d9 f3       	breq	.-10     	; 0x598 <strcmp+0x4>
 5a2:	99 0b       	sbc	r25, r25
 5a4:	08 95       	ret

000005a6 <_exit>:
 5a6:	f8 94       	cli

000005a8 <__stop_program>:
 5a8:	ff cf       	rjmp	.-2      	; 0x5a8 <__stop_program>
