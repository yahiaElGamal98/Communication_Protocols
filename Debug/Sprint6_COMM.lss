
Sprint6_COMM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000234  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a5  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077a  00000000  00000000  00000cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054b  00000000  00000000  00001477  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  000019c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046e  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000400  00000000  00000000  00002012  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002412  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  8a:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_slaveInit>:
	volatile uint8_t u8_flushHelper;
	SPDR=u8_data;
	while(LOW==((SPSR&(HIGH<<SPIF))>>SPIF));
	u8_flushHelper=SPDR;
	//SPI_PORT|=(HIGH<<SS);
}
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 64       	ori	r24, 0x40	; 64
  96:	87 bb       	out	0x17, r24	; 23
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	8f 74       	andi	r24, 0x4F	; 79
  9c:	87 bb       	out	0x17, r24	; 23
  9e:	80 e4       	ldi	r24, 0x40	; 64
  a0:	8d b9       	out	0x0d, r24	; 13
  a2:	08 95       	ret

000000a4 <SPI_slaveReceive>:
void SPI_slaveReceive(uint8_t * pu8_data)
{
	SPDR=0xFF;
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	2f b9       	out	0x0f, r18	; 15
	while(LOW==((SPSR&(HIGH<<SPIF))>>SPIF));
  a8:	77 9b       	sbis	0x0e, 7	; 14
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <SPI_slaveReceive+0x4>
	*pu8_data=SPDR;
  ac:	2f b1       	in	r18, 0x0f	; 15
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
  b2:	08 95       	ret

000000b4 <SPI_slaveReceiveString>:
}

void SPI_slaveReceiveString(uint8_t* u8_retStr)
{
  b4:	ef 92       	push	r14
  b6:	ff 92       	push	r15
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	7c 01       	movw	r14, r24
	uint8_t u8_index=0;
  c0:	c0 e0       	ldi	r28, 0x00	; 0
	while(u8_index<255)
  c2:	12 c0       	rjmp	.+36     	; 0xe8 <SPI_slaveReceiveString+0x34>
	{
		SPI_slaveReceive(&u8_retStr[u8_index]);
  c4:	87 01       	movw	r16, r14
  c6:	0c 0f       	add	r16, r28
  c8:	11 1d       	adc	r17, r1
  ca:	c8 01       	movw	r24, r16
  cc:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_slaveReceive>
		if('\0'==u8_retStr[u8_index] || '\n'==u8_retStr[u8_index] || '\r'==u8_retStr[u8_index] )
  d0:	f8 01       	movw	r30, r16
  d2:	80 81       	ld	r24, Z
  d4:	88 23       	and	r24, r24
  d6:	21 f0       	breq	.+8      	; 0xe0 <SPI_slaveReceiveString+0x2c>
  d8:	8a 30       	cpi	r24, 0x0A	; 10
  da:	11 f0       	breq	.+4      	; 0xe0 <SPI_slaveReceiveString+0x2c>
  dc:	8d 30       	cpi	r24, 0x0D	; 13
  de:	19 f4       	brne	.+6      	; 0xe6 <SPI_slaveReceiveString+0x32>
		{
			u8_retStr[u8_index]='\0';
  e0:	f8 01       	movw	r30, r16
  e2:	10 82       	st	Z, r1
			break;
  e4:	03 c0       	rjmp	.+6      	; 0xec <SPI_slaveReceiveString+0x38>
		}
		else
		{
			u8_index++;
  e6:	cf 5f       	subi	r28, 0xFF	; 255
}

void SPI_slaveReceiveString(uint8_t* u8_retStr)
{
	uint8_t u8_index=0;
	while(u8_index<255)
  e8:	cf 3f       	cpi	r28, 0xFF	; 255
  ea:	61 f7       	brne	.-40     	; 0xc4 <SPI_slaveReceiveString+0x10>
		else
		{
			u8_index++;
		}
	}
}
  ec:	cf 91       	pop	r28
  ee:	1f 91       	pop	r17
  f0:	0f 91       	pop	r16
  f2:	ff 90       	pop	r15
  f4:	ef 90       	pop	r14
  f6:	08 95       	ret

000000f8 <__vector_13>:
	RxCompleteCallback=callback;
}
void UART_receiveChar(uint8_t* u8_val)
{
	while(LOW==((UCSRA&(HIGH<<RXC))>>RXC));
	*u8_val=UDR;
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
 11a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11e:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 122:	09 95       	icall
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	bf 91       	pop	r27
 12a:	af 91       	pop	r26
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	7f 91       	pop	r23
 132:	6f 91       	pop	r22
 134:	5f 91       	pop	r21
 136:	4f 91       	pop	r20
 138:	3f 91       	pop	r19
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <UART_init>:
 146:	83 e3       	ldi	r24, 0x33	; 51
 148:	89 b9       	out	0x09, r24	; 9
 14a:	10 bc       	out	0x20, r1	; 32
 14c:	88 e9       	ldi	r24, 0x98	; 152
 14e:	8a b9       	out	0x0a, r24	; 10
 150:	86 e8       	ldi	r24, 0x86	; 134
 152:	80 bd       	out	0x20, r24	; 32
 154:	08 95       	ret

00000156 <UART_sendChar>:
}
void UART_sendChar(uint8_t u8_char)
{
	while(LOW==((UCSRA&(HIGH<<UDRE))>>UDRE));
 156:	5d 9b       	sbis	0x0b, 5	; 11
 158:	fe cf       	rjmp	.-4      	; 0x156 <UART_sendChar>
	UDR=u8_char;
 15a:	8c b9       	out	0x0c, r24	; 12
 15c:	08 95       	ret

0000015e <UART_sendString>:
}
void UART_sendString(uint8_t* u8_str)
{
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	8c 01       	movw	r16, r24
	uint8_t u8_index=0;
 166:	c0 e0       	ldi	r28, 0x00	; 0
	while((u8_str[u8_index]!='\0')&&(u8_str[u8_index]!='\r')&&(u8_str[u8_index]!='\n'))
 168:	03 c0       	rjmp	.+6      	; 0x170 <UART_sendString+0x12>
	{
		UART_sendChar(u8_str[u8_index]);
 16a:	0e 94 ab 00 	call	0x156	; 0x156 <UART_sendChar>
		u8_index++;
 16e:	cf 5f       	subi	r28, 0xFF	; 255
	UDR=u8_char;
}
void UART_sendString(uint8_t* u8_str)
{
	uint8_t u8_index=0;
	while((u8_str[u8_index]!='\0')&&(u8_str[u8_index]!='\r')&&(u8_str[u8_index]!='\n'))
 170:	f8 01       	movw	r30, r16
 172:	ec 0f       	add	r30, r28
 174:	f1 1d       	adc	r31, r1
 176:	80 81       	ld	r24, Z
 178:	88 23       	and	r24, r24
 17a:	21 f0       	breq	.+8      	; 0x184 <UART_sendString+0x26>
 17c:	8d 30       	cpi	r24, 0x0D	; 13
 17e:	11 f0       	breq	.+4      	; 0x184 <UART_sendString+0x26>
 180:	8a 30       	cpi	r24, 0x0A	; 10
 182:	99 f7       	brne	.-26     	; 0x16a <UART_sendString+0xc>
	{
		UART_sendChar(u8_str[u8_index]);
		u8_index++;
	}
}
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <main>:
#include "./01-LIB/STD_types.h"
#include "./02-MCAL/SPI/SPI_interface.h"
#include "./02-MCAL/UART/UART_interface.h"

int main(void)
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	cf 5f       	subi	r28, 0xFF	; 255
 196:	d1 09       	sbc	r29, r1
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_val[255];
	SPI_slaveInit();
 1a2:	0e 94 49 00 	call	0x92	; 0x92 <SPI_slaveInit>
	UART_init();
 1a6:	0e 94 a3 00 	call	0x146	; 0x146 <UART_init>
    /* Replace with your application code */
    while (1) 
    {
		SPI_slaveReceiveString(u8_val);
 1aa:	ce 01       	movw	r24, r28
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPI_slaveReceiveString>
		UART_sendString(u8_val);
 1b2:	ce 01       	movw	r24, r28
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	0e 94 af 00 	call	0x15e	; 0x15e <UART_sendString>
 1ba:	f7 cf       	rjmp	.-18     	; 0x1aa <main+0x1e>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
