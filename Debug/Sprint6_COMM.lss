
Sprint6_COMM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000456  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  00000456  000004ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000e8  008000e8  00000572  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001272  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f7  00000000  00000000  000019ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8e  00000000  00000000  000022b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00002d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000620  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000756  00000000  00000000  00003654  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00003daa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3e       	cpi	r26, 0xE8	; 232
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ee       	ldi	r26, 0xE8	; 232
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3e       	cpi	r26, 0xEA	; 234
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
  8a:	0c 94 29 02 	jmp	0x452	; 0x452 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_init>:
	else
	{
		*u8_data=TWDR;
		return E_OK;
	}
}
  92:	81 b1       	in	r24, 0x01	; 1
  94:	8c 7f       	andi	r24, 0xFC	; 252
  96:	81 b9       	out	0x01, r24	; 1
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	80 b9       	out	0x00, r24	; 0
  9c:	08 95       	ret

0000009e <I2C_masterStartWrite>:
  9e:	94 ea       	ldi	r25, 0xA4	; 164
  a0:	96 bf       	out	0x36, r25	; 54
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <I2C_masterStartWrite+0x4>
  a8:	91 b1       	in	r25, 0x01	; 1
  aa:	98 7f       	andi	r25, 0xF8	; 248
  ac:	98 30       	cpi	r25, 0x08	; 8
  ae:	61 f4       	brne	.+24     	; 0xc8 <I2C_masterStartWrite+0x2a>
  b0:	83 b9       	out	0x03, r24	; 3
  b2:	84 e8       	ldi	r24, 0x84	; 132
  b4:	86 bf       	out	0x36, r24	; 54
  b6:	06 b6       	in	r0, 0x36	; 54
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <I2C_masterStartWrite+0x18>
  bc:	81 b1       	in	r24, 0x01	; 1
  be:	88 7f       	andi	r24, 0xF8	; 248
  c0:	88 31       	cpi	r24, 0x18	; 24
  c2:	21 f0       	breq	.+8      	; 0xcc <I2C_masterStartWrite+0x2e>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	08 95       	ret
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	08 95       	ret
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	08 95       	ret

000000d0 <I2C_masterSendData>:
  d0:	83 b9       	out	0x03, r24	; 3
  d2:	84 e8       	ldi	r24, 0x84	; 132
  d4:	86 bf       	out	0x36, r24	; 54
  d6:	06 b6       	in	r0, 0x36	; 54
  d8:	07 fe       	sbrs	r0, 7
  da:	fd cf       	rjmp	.-6      	; 0xd6 <I2C_masterSendData+0x6>
  dc:	81 b1       	in	r24, 0x01	; 1
  de:	88 7f       	andi	r24, 0xF8	; 248
  e0:	88 32       	cpi	r24, 0x28	; 40
  e2:	31 f0       	breq	.+12     	; 0xf0 <I2C_masterSendData+0x20>
  e4:	81 b1       	in	r24, 0x01	; 1
  e6:	88 7f       	andi	r24, 0xF8	; 248
  e8:	80 33       	cpi	r24, 0x30	; 48
  ea:	21 f4       	brne	.+8      	; 0xf4 <I2C_masterSendData+0x24>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	08 95       	ret
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <I2C_masterReceiveDataNAck>:
EN_ErrorStatus_t I2C_masterReceiveDataNAck(uint8_t * u8_data)
{
  f8:	fc 01       	movw	r30, r24
	TWCR = (HIGH<<TWINT) | (HIGH <<TWEN);
  fa:	94 e8       	ldi	r25, 0x84	; 132
  fc:	96 bf       	out	0x36, r25	; 54
	while(LOW==((TWCR&(HIGH<<TWINT))>>TWINT));
  fe:	06 b6       	in	r0, 0x36	; 54
 100:	07 fe       	sbrs	r0, 7
 102:	fd cf       	rjmp	.-6      	; 0xfe <I2C_masterReceiveDataNAck+0x6>
	if(M_DATA_R_NACK!=(TWSR&TWSR_MASK))
 104:	91 b1       	in	r25, 0x01	; 1
 106:	98 7f       	andi	r25, 0xF8	; 248
 108:	98 35       	cpi	r25, 0x58	; 88
 10a:	21 f4       	brne	.+8      	; 0x114 <I2C_masterReceiveDataNAck+0x1c>
	{
		return E_NOK;
	}
	else
	{
		*u8_data=TWDR;
 10c:	83 b1       	in	r24, 0x03	; 3
 10e:	80 83       	st	Z, r24
		return E_OK;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	08 95       	ret
{
	TWCR = (HIGH<<TWINT) | (HIGH <<TWEN);
	while(LOW==((TWCR&(HIGH<<TWINT))>>TWINT));
	if(M_DATA_R_NACK!=(TWSR&TWSR_MASK))
	{
		return E_NOK;
 114:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		*u8_data=TWDR;
		return E_OK;
	}	
}
 116:	08 95       	ret

00000118 <I2C_stop>:
void I2C_stop()
{
	TWCR=(HIGH<<TWINT) | (HIGH<<TWSTO) |(HIGH<<TWEN);
 118:	84 e9       	ldi	r24, 0x94	; 148
 11a:	86 bf       	out	0x36, r24	; 54
 11c:	08 95       	ret

0000011e <I2C_masterRepeatedStartRead>:
	//while(LOW==((TWCR&(HIGH<<TWSTO))>>TWSTO));
}
EN_ErrorStatus_t I2C_masterRepeatedStartRead(uint8_t u8_SLA)
{
	TWCR = (HIGH<<TWINT) | (HIGH<<TWSTA) | (HIGH <<TWEN);
 11e:	94 ea       	ldi	r25, 0xA4	; 164
 120:	96 bf       	out	0x36, r25	; 54
	while(LOW==((TWCR&(HIGH<<TWINT))>>TWINT));
 122:	06 b6       	in	r0, 0x36	; 54
 124:	07 fe       	sbrs	r0, 7
 126:	fd cf       	rjmp	.-6      	; 0x122 <I2C_masterRepeatedStartRead+0x4>
	if(M_REPEATED_START!=(TWSR&TWSR_MASK))
 128:	91 b1       	in	r25, 0x01	; 1
 12a:	98 7f       	andi	r25, 0xF8	; 248
 12c:	90 31       	cpi	r25, 0x10	; 16
 12e:	89 f4       	brne	.+34     	; 0x152 <I2C_masterRepeatedStartRead+0x34>
	{
		return E_NOK;
	}
	else
	{
		TWDR=u8_SLA+READ;
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	83 b9       	out	0x03, r24	; 3
		TWCR= (HIGH<<TWINT)|(HIGH<<TWEN);
 134:	84 e8       	ldi	r24, 0x84	; 132
 136:	86 bf       	out	0x36, r24	; 54
		while (LOW==((TWCR&(HIGH<<TWINT))>>TWINT));
 138:	06 b6       	in	r0, 0x36	; 54
 13a:	07 fe       	sbrs	r0, 7
 13c:	fd cf       	rjmp	.-6      	; 0x138 <I2C_masterRepeatedStartRead+0x1a>
		if((M_SLA_R_ACK==(TWSR&TWSR_MASK)) || (M_SLA_R_NACK==(TWSR&TWSR_MASK)))
 13e:	81 b1       	in	r24, 0x01	; 1
 140:	88 7f       	andi	r24, 0xF8	; 248
 142:	80 34       	cpi	r24, 0x40	; 64
 144:	41 f0       	breq	.+16     	; 0x156 <I2C_masterRepeatedStartRead+0x38>
 146:	81 b1       	in	r24, 0x01	; 1
 148:	88 7f       	andi	r24, 0xF8	; 248
 14a:	88 34       	cpi	r24, 0x48	; 72
 14c:	31 f4       	brne	.+12     	; 0x15a <I2C_masterRepeatedStartRead+0x3c>
		{
			return E_OK;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	08 95       	ret
{
	TWCR = (HIGH<<TWINT) | (HIGH<<TWSTA) | (HIGH <<TWEN);
	while(LOW==((TWCR&(HIGH<<TWINT))>>TWINT));
	if(M_REPEATED_START!=(TWSR&TWSR_MASK))
	{
		return E_NOK;
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret
		TWDR=u8_SLA+READ;
		TWCR= (HIGH<<TWINT)|(HIGH<<TWEN);
		while (LOW==((TWCR&(HIGH<<TWINT))>>TWINT));
		if((M_SLA_R_ACK==(TWSR&TWSR_MASK)) || (M_SLA_R_NACK==(TWSR&TWSR_MASK)))
		{
			return E_OK;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret
		}
		else
		{
			return E_NOK;
 15a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
}
 15c:	08 95       	ret

0000015e <__vector_13>:
	RxCompleteCallback=callback;
}
uint8_t UART_returnRxStatus(void)
{
	return ((UCSRA&(HIGH<<RXC))>>RXC);
}
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
 180:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
 184:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
 188:	09 95       	icall
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	7f 91       	pop	r23
 198:	6f 91       	pop	r22
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <UART_init>:
 1ac:	83 e3       	ldi	r24, 0x33	; 51
 1ae:	89 b9       	out	0x09, r24	; 9
 1b0:	10 bc       	out	0x20, r1	; 32
 1b2:	88 e1       	ldi	r24, 0x18	; 24
 1b4:	8a b9       	out	0x0a, r24	; 10
 1b6:	86 e8       	ldi	r24, 0x86	; 134
 1b8:	80 bd       	out	0x20, r24	; 32
 1ba:	08 95       	ret

000001bc <UART_receiveChar>:
void UART_receiveChar(uint8_t* u8_val)
{
	while(LOW==((UCSRA&(HIGH<<RXC))>>RXC));
 1bc:	5f 9b       	sbis	0x0b, 7	; 11
 1be:	fe cf       	rjmp	.-4      	; 0x1bc <UART_receiveChar>
	*u8_val=UDR;
 1c0:	2c b1       	in	r18, 0x0c	; 12
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 83       	st	Z, r18
 1c6:	08 95       	ret

000001c8 <UART_sendChar>:
}
void UART_sendChar(uint8_t u8_char)
{
	while(LOW==((UCSRA&(HIGH<<UDRE))>>UDRE));
 1c8:	5d 9b       	sbis	0x0b, 5	; 11
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <UART_sendChar>
	UDR=u8_char;
 1cc:	8c b9       	out	0x0c, r24	; 12
 1ce:	08 95       	ret

000001d0 <UART_sendString>:
}
void UART_sendString(uint8_t* u8_str)
{
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	8c 01       	movw	r16, r24
	uint8_t u8_index=0;
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
	while((u8_str[u8_index]!='\0')&&(u8_str[u8_index]!='\r')&&(u8_str[u8_index]!='\n'))
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <UART_sendString+0x12>
	{
		UART_sendChar(u8_str[u8_index]);
 1dc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <UART_sendChar>
		u8_index++;
 1e0:	cf 5f       	subi	r28, 0xFF	; 255
	UDR=u8_char;
}
void UART_sendString(uint8_t* u8_str)
{
	uint8_t u8_index=0;
	while((u8_str[u8_index]!='\0')&&(u8_str[u8_index]!='\r')&&(u8_str[u8_index]!='\n'))
 1e2:	f8 01       	movw	r30, r16
 1e4:	ec 0f       	add	r30, r28
 1e6:	f1 1d       	adc	r31, r1
 1e8:	80 81       	ld	r24, Z
 1ea:	88 23       	and	r24, r24
 1ec:	21 f0       	breq	.+8      	; 0x1f6 <UART_sendString+0x26>
 1ee:	8d 30       	cpi	r24, 0x0D	; 13
 1f0:	11 f0       	breq	.+4      	; 0x1f6 <UART_sendString+0x26>
 1f2:	8a 30       	cpi	r24, 0x0A	; 10
 1f4:	99 f7       	brne	.-26     	; 0x1dc <UART_sendString+0xc>
	{
		UART_sendChar(u8_str[u8_index]);
		u8_index++;
	}
}
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	08 95       	ret

000001fe <UART_receiveString>:
void UART_receiveString(uint8_t* u8_retStr)
{
 1fe:	ef 92       	push	r14
 200:	ff 92       	push	r15
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	7c 01       	movw	r14, r24
	uint8_t u8_index=0;
 20a:	c0 e0       	ldi	r28, 0x00	; 0
	while(u8_index<255)
 20c:	12 c0       	rjmp	.+36     	; 0x232 <UART_receiveString+0x34>
	{
		UART_receiveChar(&u8_retStr[u8_index]);
 20e:	87 01       	movw	r16, r14
 210:	0c 0f       	add	r16, r28
 212:	11 1d       	adc	r17, r1
 214:	c8 01       	movw	r24, r16
 216:	0e 94 de 00 	call	0x1bc	; 0x1bc <UART_receiveChar>
		if('\0'==u8_retStr[u8_index] ||'\n'==u8_retStr[u8_index] ||'\r'==u8_retStr[u8_index])
 21a:	f8 01       	movw	r30, r16
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	21 f0       	breq	.+8      	; 0x22a <UART_receiveString+0x2c>
 222:	8a 30       	cpi	r24, 0x0A	; 10
 224:	11 f0       	breq	.+4      	; 0x22a <UART_receiveString+0x2c>
 226:	8d 30       	cpi	r24, 0x0D	; 13
 228:	19 f4       	brne	.+6      	; 0x230 <UART_receiveString+0x32>
		{
			u8_retStr[u8_index]='\0';
 22a:	f8 01       	movw	r30, r16
 22c:	10 82       	st	Z, r1
			break;
 22e:	03 c0       	rjmp	.+6      	; 0x236 <UART_receiveString+0x38>
		}
		else
		{
			u8_index++;
 230:	cf 5f       	subi	r28, 0xFF	; 255
	}
}
void UART_receiveString(uint8_t* u8_retStr)
{
	uint8_t u8_index=0;
	while(u8_index<255)
 232:	cf 3f       	cpi	r28, 0xFF	; 255
 234:	61 f7       	brne	.-40     	; 0x20e <UART_receiveString+0x10>
		else
		{
			u8_index++;
		}
	}
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	08 95       	ret

00000242 <EEPROM_init>:

#define BYTE_SIZE 8

void EEPROM_init()
{
	I2C_init();
 242:	0e 94 49 00 	call	0x92	; 0x92 <I2C_init>
 246:	08 95       	ret

00000248 <EEPROM_read>:
}
EN_ErrorStatus_t EEPROM_read(uint8_t SLA, uint16_t addr, uint8_t* retVal)
{
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	c8 2f       	mov	r28, r24
 254:	d6 2f       	mov	r29, r22
 256:	f7 2e       	mov	r15, r23
 258:	8a 01       	movw	r16, r20
	EN_ErrorStatus_t EN_locStatus;
	EN_locStatus=I2C_masterStartWrite(SLA);
 25a:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_masterStartWrite>
	EN_locStatus=I2C_masterSendData(((uint8_t)(addr>>BYTE_SIZE)));
 25e:	8f 2d       	mov	r24, r15
 260:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_masterSendData>
	EN_locStatus=I2C_masterSendData(((uint8_t)(addr)));
 264:	8d 2f       	mov	r24, r29
 266:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_masterSendData>
	EN_locStatus=I2C_masterRepeatedStartRead(SLA);
 26a:	8c 2f       	mov	r24, r28
 26c:	0e 94 8f 00 	call	0x11e	; 0x11e <I2C_masterRepeatedStartRead>
	EN_locStatus=I2C_masterReceiveDataNAck(retVal);
 270:	c8 01       	movw	r24, r16
 272:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_masterReceiveDataNAck>
 276:	c8 2f       	mov	r28, r24
	I2C_stop();
 278:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_stop>
	return EN_locStatus;
}
 27c:	8c 2f       	mov	r24, r28
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	08 95       	ret

0000028a <EEPROM_write>:
EN_ErrorStatus_t EEPROM_write(uint8_t SLA, uint16_t addr, uint8_t data)
{
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	d6 2f       	mov	r29, r22
 292:	17 2f       	mov	r17, r23
 294:	c4 2f       	mov	r28, r20
	EN_ErrorStatus_t EN_locStatus;
	EN_locStatus=I2C_masterStartWrite(SLA);
 296:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_masterStartWrite>
	EN_locStatus=I2C_masterSendData(((uint8_t)(addr>>BYTE_SIZE)));
 29a:	81 2f       	mov	r24, r17
 29c:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_masterSendData>
	EN_locStatus=I2C_masterSendData(((uint8_t)(addr)));
 2a0:	8d 2f       	mov	r24, r29
 2a2:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_masterSendData>
	EN_locStatus=I2C_masterSendData(data);
 2a6:	8c 2f       	mov	r24, r28
 2a8:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_masterSendData>
 2ac:	c8 2f       	mov	r28, r24
	I2C_stop();
 2ae:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_stop>
	return EN_locStatus;
 2b2:	8c 2f       	mov	r24, r28
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	08 95       	ret

000002bc <TERMINAL_init>:
#include "../../02-MCAL/UART/UART_interface.h"
#include "Terminal.h"

void TERMINAL_init(void)
{
	UART_init();
 2bc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_init>
 2c0:	08 95       	ret

000002c2 <TERMINAL_read>:
}
void TERMINAL_read(uint8_t* u8_retStr)
{
	UART_receiveString(u8_retStr);
 2c2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <UART_receiveString>
 2c6:	08 95       	ret

000002c8 <TERMINAL_write>:
}
void TERMINAL_write(uint8_t* u8_str)
{
	UART_sendString(u8_str);
 2c8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <UART_sendString>
 2cc:	08 95       	ret

000002ce <TERMINAL_writeChar>:
}
void TERMINAL_writeChar(uint8_t u8_char)
{
	UART_sendChar(u8_char);
 2ce:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <UART_sendChar>
 2d2:	08 95       	ret

000002d4 <TERMINAL_readChar>:
}
void TERMINAL_readChar(uint8_t* u8_char)
{
	UART_receiveChar(u8_char);
 2d4:	0e 94 de 00 	call	0x1bc	; 0x1bc <UART_receiveChar>
 2d8:	08 95       	ret

000002da <TERMINAL_newLine>:
}
void TERMINAL_newLine(void)
{
	UART_sendChar('\n');
 2da:	8a e0       	ldi	r24, 0x0A	; 10
 2dc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <UART_sendChar>
	UART_sendChar('\r');
 2e0:	8d e0       	ldi	r24, 0x0D	; 13
 2e2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <UART_sendChar>
 2e6:	08 95       	ret

000002e8 <main>:

#define FOUND 0


int main(void)
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	2f 97       	sbiw	r28, 0x0f	; 15
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_send;
	uint8_t u8_retData;
	uint8_t au8_address[7];
	uint16_t u16_address;
	uint8_t au8_command[6];
	TERMINAL_init();
 2fc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <TERMINAL_init>
	EEPROM_init();
 300:	0e 94 21 01 	call	0x242	; 0x242 <EEPROM_init>
    /* Replace with your application code */
	while (1) 
    {
		TERMINAL_write("Enter a command (READ) OR (WRITE)");
 304:	80 e6       	ldi	r24, 0x60	; 96
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 64 01 	call	0x2c8	; 0x2c8 <TERMINAL_write>
		TERMINAL_newLine();
 30c:	0e 94 6d 01 	call	0x2da	; 0x2da <TERMINAL_newLine>
		TERMINAL_read(au8_command);
 310:	ce 01       	movw	r24, r28
 312:	0a 96       	adiw	r24, 0x0a	; 10
 314:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TERMINAL_read>
		if(FOUND==strcmp(au8_command,"READ"))
 318:	62 e8       	ldi	r22, 0x82	; 130
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	ce 01       	movw	r24, r28
 31e:	0a 96       	adiw	r24, 0x0a	; 10
 320:	0e 94 18 02 	call	0x430	; 0x430 <strcmp>
 324:	89 2b       	or	r24, r25
 326:	61 f5       	brne	.+88     	; 0x380 <main+0x98>
		{
			TERMINAL_write("OK");
 328:	87 e8       	ldi	r24, 0x87	; 135
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <TERMINAL_write>
			TERMINAL_newLine();
 330:	0e 94 6d 01 	call	0x2da	; 0x2da <TERMINAL_newLine>
			TERMINAL_write("Enter read address : ");
 334:	8a e8       	ldi	r24, 0x8A	; 138
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 64 01 	call	0x2c8	; 0x2c8 <TERMINAL_write>
			TERMINAL_read(au8_address);
 33c:	ce 01       	movw	r24, r28
 33e:	03 96       	adiw	r24, 0x03	; 3
 340:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TERMINAL_read>
			TERMINAL_newLine();
 344:	0e 94 6d 01 	call	0x2da	; 0x2da <TERMINAL_newLine>
			u16_address=atoi(au8_address);
 348:	ce 01       	movw	r24, r28
 34a:	03 96       	adiw	r24, 0x03	; 3
 34c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <atoi>
 350:	8c 01       	movw	r16, r24
			TERMINAL_write("OK");
 352:	87 e8       	ldi	r24, 0x87	; 135
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 64 01 	call	0x2c8	; 0x2c8 <TERMINAL_write>
			TERMINAL_newLine();
 35a:	0e 94 6d 01 	call	0x2da	; 0x2da <TERMINAL_newLine>
			EEPROM_read(EEPROM_ADDR,u16_address,&u8_retData);
 35e:	ae 01       	movw	r20, r28
 360:	4e 5f       	subi	r20, 0xFE	; 254
 362:	5f 4f       	sbci	r21, 0xFF	; 255
 364:	b8 01       	movw	r22, r16
 366:	80 ea       	ldi	r24, 0xA0	; 160
 368:	0e 94 24 01 	call	0x248	; 0x248 <EEPROM_read>
			TERMINAL_write("DATA Returned is : ");
 36c:	80 ea       	ldi	r24, 0xA0	; 160
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 64 01 	call	0x2c8	; 0x2c8 <TERMINAL_write>
			TERMINAL_writeChar(u8_retData);
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	0e 94 67 01 	call	0x2ce	; 0x2ce <TERMINAL_writeChar>
			TERMINAL_newLine();
 37a:	0e 94 6d 01 	call	0x2da	; 0x2da <TERMINAL_newLine>
 37e:	c2 cf       	rjmp	.-124    	; 0x304 <main+0x1c>
		}
		else if (FOUND==strcmp(au8_command,"WRITE"))
 380:	64 eb       	ldi	r22, 0xB4	; 180
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	ce 01       	movw	r24, r28
 386:	0a 96       	adiw	r24, 0x0a	; 10
 388:	0e 94 18 02 	call	0x430	; 0x430 <strcmp>
 38c:	89 2b       	or	r24, r25
 38e:	09 f0       	breq	.+2      	; 0x392 <main+0xaa>
 390:	b9 cf       	rjmp	.-142    	; 0x304 <main+0x1c>
		{
			TERMINAL_write("OK");
 392:	87 e8       	ldi	r24, 0x87	; 135
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 64 01 	call	0x2c8	; 0x2c8 <TERMINAL_write>
			TERMINAL_newLine();
 39a:	0e 94 6d 01 	call	0x2da	; 0x2da <TERMINAL_newLine>
			TERMINAL_write("Enter write address : ");
 39e:	8a eb       	ldi	r24, 0xBA	; 186
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <TERMINAL_write>
			TERMINAL_read(au8_address);
 3a6:	ce 01       	movw	r24, r28
 3a8:	03 96       	adiw	r24, 0x03	; 3
 3aa:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TERMINAL_read>
			TERMINAL_newLine();
 3ae:	0e 94 6d 01 	call	0x2da	; 0x2da <TERMINAL_newLine>
			u16_address=atoi(au8_address);
 3b2:	ce 01       	movw	r24, r28
 3b4:	03 96       	adiw	r24, 0x03	; 3
 3b6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <atoi>
 3ba:	8c 01       	movw	r16, r24
			TERMINAL_write("OK");
 3bc:	87 e8       	ldi	r24, 0x87	; 135
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <TERMINAL_write>
			TERMINAL_newLine();
 3c4:	0e 94 6d 01 	call	0x2da	; 0x2da <TERMINAL_newLine>
			TERMINAL_write("Enter Data : ");
 3c8:	81 ed       	ldi	r24, 0xD1	; 209
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <TERMINAL_write>
			TERMINAL_readChar(&u8_send);
 3d0:	ce 01       	movw	r24, r28
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <TERMINAL_readChar>
			TERMINAL_newLine();
 3d8:	0e 94 6d 01 	call	0x2da	; 0x2da <TERMINAL_newLine>
			EEPROM_write(EEPROM_ADDR,u16_address,u8_send);
 3dc:	49 81       	ldd	r20, Y+1	; 0x01
 3de:	b8 01       	movw	r22, r16
 3e0:	80 ea       	ldi	r24, 0xA0	; 160
 3e2:	0e 94 45 01 	call	0x28a	; 0x28a <EEPROM_write>
			TERMINAL_write("OK,Done");
 3e6:	8f ed       	ldi	r24, 0xDF	; 223
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 64 01 	call	0x2c8	; 0x2c8 <TERMINAL_write>
			TERMINAL_newLine();
 3ee:	0e 94 6d 01 	call	0x2da	; 0x2da <TERMINAL_newLine>
 3f2:	88 cf       	rjmp	.-240    	; 0x304 <main+0x1c>

000003f4 <atoi>:
 3f4:	fc 01       	movw	r30, r24
 3f6:	88 27       	eor	r24, r24
 3f8:	99 27       	eor	r25, r25
 3fa:	e8 94       	clt
 3fc:	21 91       	ld	r18, Z+
 3fe:	20 32       	cpi	r18, 0x20	; 32
 400:	e9 f3       	breq	.-6      	; 0x3fc <atoi+0x8>
 402:	29 30       	cpi	r18, 0x09	; 9
 404:	10 f0       	brcs	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	2e 30       	cpi	r18, 0x0E	; 14
 408:	c8 f3       	brcs	.-14     	; 0x3fc <atoi+0x8>
 40a:	2b 32       	cpi	r18, 0x2B	; 43
 40c:	41 f0       	breq	.+16     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 40e:	2d 32       	cpi	r18, 0x2D	; 45
 410:	39 f4       	brne	.+14     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 412:	68 94       	set
 414:	04 c0       	rjmp	.+8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 416:	0e 94 21 02 	call	0x442	; 0x442 <__mulhi_const_10>
 41a:	82 0f       	add	r24, r18
 41c:	91 1d       	adc	r25, r1
 41e:	21 91       	ld	r18, Z+
 420:	20 53       	subi	r18, 0x30	; 48
 422:	2a 30       	cpi	r18, 0x0A	; 10
 424:	c0 f3       	brcs	.-16     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 426:	1e f4       	brtc	.+6      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 428:	90 95       	com	r25
 42a:	81 95       	neg	r24
 42c:	9f 4f       	sbci	r25, 0xFF	; 255
 42e:	08 95       	ret

00000430 <strcmp>:
 430:	fb 01       	movw	r30, r22
 432:	dc 01       	movw	r26, r24
 434:	8d 91       	ld	r24, X+
 436:	01 90       	ld	r0, Z+
 438:	80 19       	sub	r24, r0
 43a:	01 10       	cpse	r0, r1
 43c:	d9 f3       	breq	.-10     	; 0x434 <strcmp+0x4>
 43e:	99 0b       	sbc	r25, r25
 440:	08 95       	ret

00000442 <__mulhi_const_10>:
 442:	7a e0       	ldi	r23, 0x0A	; 10
 444:	97 9f       	mul	r25, r23
 446:	90 2d       	mov	r25, r0
 448:	87 9f       	mul	r24, r23
 44a:	80 2d       	mov	r24, r0
 44c:	91 0d       	add	r25, r1
 44e:	11 24       	eor	r1, r1
 450:	08 95       	ret

00000452 <_exit>:
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>
