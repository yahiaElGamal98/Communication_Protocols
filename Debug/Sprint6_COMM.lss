
Sprint6_COMM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086e  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063d  00000000  00000000  00000ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004bc  00000000  00000000  0000111b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ce  00000000  00000000  00001b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001cd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_init>:
void I2C_masterReceiveDataNAck(uint8_t * u8_data)
{
	TWCR = (HIGH<<TWINT) | (HIGH <<TWEN);
	while(LOW==((TWCR&(HIGH<<TWINT))>>TWINT))
	while(M_DATA_R_NACK!=(TWSR&TWSR_MASK));
	*u8_data=TWDR;
  6c:	82 e0       	ldi	r24, 0x02	; 2
  6e:	80 b9       	out	0x00, r24	; 0
  70:	81 b1       	in	r24, 0x01	; 1
  72:	8c 7f       	andi	r24, 0xFC	; 252
  74:	81 b9       	out	0x01, r24	; 1
  76:	08 95       	ret

00000078 <I2C_masterStartWrite>:
  78:	94 ea       	ldi	r25, 0xA4	; 164
  7a:	96 bf       	out	0x36, r25	; 54
  7c:	06 b6       	in	r0, 0x36	; 54
  7e:	07 fe       	sbrs	r0, 7
  80:	fd cf       	rjmp	.-6      	; 0x7c <I2C_masterStartWrite+0x4>
  82:	91 b1       	in	r25, 0x01	; 1
  84:	98 7f       	andi	r25, 0xF8	; 248
  86:	98 30       	cpi	r25, 0x08	; 8
  88:	e1 f7       	brne	.-8      	; 0x82 <I2C_masterStartWrite+0xa>
  8a:	83 b9       	out	0x03, r24	; 3
  8c:	84 e8       	ldi	r24, 0x84	; 132
  8e:	86 bf       	out	0x36, r24	; 54
  90:	06 b6       	in	r0, 0x36	; 54
  92:	07 fe       	sbrs	r0, 7
  94:	fd cf       	rjmp	.-6      	; 0x90 <I2C_masterStartWrite+0x18>
  96:	81 b1       	in	r24, 0x01	; 1
  98:	88 7f       	andi	r24, 0xF8	; 248
  9a:	88 31       	cpi	r24, 0x18	; 24
  9c:	e1 f7       	brne	.-8      	; 0x96 <I2C_masterStartWrite+0x1e>
  9e:	08 95       	ret

000000a0 <I2C_masterSendData>:
  a0:	83 b9       	out	0x03, r24	; 3
  a2:	84 e8       	ldi	r24, 0x84	; 132
  a4:	86 bf       	out	0x36, r24	; 54
  a6:	06 b6       	in	r0, 0x36	; 54
  a8:	07 fe       	sbrs	r0, 7
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <I2C_masterSendData+0x6>
  ac:	81 b1       	in	r24, 0x01	; 1
  ae:	88 7f       	andi	r24, 0xF8	; 248
  b0:	88 32       	cpi	r24, 0x28	; 40
  b2:	e1 f7       	brne	.-8      	; 0xac <I2C_masterSendData+0xc>
  b4:	08 95       	ret

000000b6 <I2C_stop>:
}
void I2C_stop()
{
	TWCR=(HIGH<<TWINT) | (HIGH<<TWSTO) |(HIGH<<TWEN);
  b6:	84 e9       	ldi	r24, 0x94	; 148
  b8:	86 bf       	out	0x36, r24	; 54
	while(LOW==((TWCR&(HIGH<<TWINT))>>TWINT));
  ba:	06 b6       	in	r0, 0x36	; 54
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <I2C_stop+0x4>
}
  c0:	08 95       	ret

000000c2 <msdelay>:
		I2C_stop();
		msdelay(1000);
    }
}
void msdelay(uint16_t u16_time)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	00 d0       	rcall	.+0      	; 0xc8 <msdelay+0x6>
  c8:	1f 92       	push	r1
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t u16_index;
	volatile uint8_t u8_index;
	for(u16_index=0;u16_index<u16_time;u16_index++)
  ce:	1a 82       	std	Y+2, r1	; 0x02
  d0:	19 82       	std	Y+1, r1	; 0x01
  d2:	29 81       	ldd	r18, Y+1	; 0x01
  d4:	3a 81       	ldd	r19, Y+2	; 0x02
  d6:	28 17       	cp	r18, r24
  d8:	39 07       	cpc	r19, r25
  da:	30 f4       	brcc	.+12     	; 0xe8 <msdelay+0x26>
	{
		for(u8_index=0;u8_index<450;u8_index++);
  dc:	1b 82       	std	Y+3, r1	; 0x03
  de:	8b 81       	ldd	r24, Y+3	; 0x03
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	8b 83       	std	Y+3, r24	; 0x03
  e6:	fb cf       	rjmp	.-10     	; 0xde <msdelay+0x1c>
	}
	
}
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	0f 90       	pop	r0
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <main>:
#define SLAVE_ADD 0x10
void msdelay(uint16_t u16_time);
int main(void)
{
	uint8_t u8_send;
	I2C_init();
  f4:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_init>
	
    /* Replace with your application code */
    while (1) 
    {
		I2C_masterStartWrite(SLAVE_ADD);
  f8:	80 e1       	ldi	r24, 0x10	; 16
  fa:	0e 94 3c 00 	call	0x78	; 0x78 <I2C_masterStartWrite>
		I2C_masterSendData(u8_send);
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 50 00 	call	0xa0	; 0xa0 <I2C_masterSendData>
		I2C_stop();
 104:	0e 94 5b 00 	call	0xb6	; 0xb6 <I2C_stop>
		msdelay(1000);
 108:	88 ee       	ldi	r24, 0xE8	; 232
 10a:	93 e0       	ldi	r25, 0x03	; 3
 10c:	0e 94 61 00 	call	0xc2	; 0xc2 <msdelay>
 110:	f3 cf       	rjmp	.-26     	; 0xf8 <main+0x4>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
