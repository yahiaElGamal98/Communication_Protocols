
Sprint6_COMM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000001dc  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008bd  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000659  00000000  00000000  00000c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d6  00000000  00000000  0000125a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001630  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000184  00000000  00000000  00001a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001c0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  7a:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_init>:
#define LOW 0

void UART_init()
{
	//set baud rate
	UBRRL=(uint8_t)(BAUD_RATE);
  82:	83 e3       	ldi	r24, 0x33	; 51
  84:	89 b9       	out	0x09, r24	; 9
	//select UBRRH and shift right the baud rate to set the remaining bits
	UBRRH_UCSRC= (uint8_t)(BAUD_RATE>> REG_SIZE);
  86:	10 bc       	out	0x20, r1	; 32
	//enable transmit and receive of UART
	UCSRB= (HIGH<<RXEN) | (HIGH<<TXEN);   
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	8a b9       	out	0x0a, r24	; 10
	// select UCSRC register and configure 8 bits of data in a frame with 1 stop bit and user configured parity
	UBRRH_UCSRC = (HIGH<<URSEL) | (PARITY_MODE<<UPM0) | (STOP_MODE<<USBS) | (HIGH<<UCSZ1) | (HIGH <<UCSZ0); 
  8c:	86 e8       	ldi	r24, 0x86	; 134
  8e:	80 bd       	out	0x20, r24	; 32
  90:	08 95       	ret

00000092 <UART_receiveChar>:
}
void UART_receiveChar(uint8_t* u8_val)
{
	while(LOW==((UCSRA&(HIGH<<RXC))>>RXC));
  92:	5f 9b       	sbis	0x0b, 7	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <UART_receiveChar>
	*u8_val=UDR;
  96:	2c b1       	in	r18, 0x0c	; 12
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
  9c:	08 95       	ret

0000009e <UART_sendChar>:
}
void UART_sendChar(uint8_t u8_char)
{
	while(LOW==((UCSRA&(HIGH<<UDRE))>>UDRE));
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <UART_sendChar>
	UDR=u8_char;
  a2:	8c b9       	out	0x0c, r24	; 12
  a4:	08 95       	ret

000000a6 <UART_sendString>:
}
void UART_sendString(uint8_t* u8_str)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	8c 01       	movw	r16, r24
	uint8_t u8_index=0;
  ae:	c0 e0       	ldi	r28, 0x00	; 0
	while((u8_str[u8_index]!='\0')&&(u8_str[u8_index]!='\r')&&(u8_str[u8_index]!='\n'))
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <UART_sendString+0x12>
	{
		UART_sendChar(u8_str[u8_index]);
  b2:	0e 94 4f 00 	call	0x9e	; 0x9e <UART_sendChar>
		u8_index++;
  b6:	cf 5f       	subi	r28, 0xFF	; 255
	UDR=u8_char;
}
void UART_sendString(uint8_t* u8_str)
{
	uint8_t u8_index=0;
	while((u8_str[u8_index]!='\0')&&(u8_str[u8_index]!='\r')&&(u8_str[u8_index]!='\n'))
  b8:	f8 01       	movw	r30, r16
  ba:	ec 0f       	add	r30, r28
  bc:	f1 1d       	adc	r31, r1
  be:	80 81       	ld	r24, Z
  c0:	88 23       	and	r24, r24
  c2:	21 f0       	breq	.+8      	; 0xcc <UART_sendString+0x26>
  c4:	8d 30       	cpi	r24, 0x0D	; 13
  c6:	11 f0       	breq	.+4      	; 0xcc <UART_sendString+0x26>
  c8:	8a 30       	cpi	r24, 0x0A	; 10
  ca:	99 f7       	brne	.-26     	; 0xb2 <UART_sendString+0xc>
	{
		UART_sendChar(u8_str[u8_index]);
		u8_index++;
	}
}
  cc:	cf 91       	pop	r28
  ce:	1f 91       	pop	r17
  d0:	0f 91       	pop	r16
  d2:	08 95       	ret

000000d4 <UART_receiveString>:
void UART_receiveString(uint8_t* u8_retStr)
{
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	7c 01       	movw	r14, r24
	uint8_t u8_index=0;
  e0:	c0 e0       	ldi	r28, 0x00	; 0
	while(u8_index<255)
  e2:	12 c0       	rjmp	.+36     	; 0x108 <UART_receiveString+0x34>
	{
		UART_receiveChar(&u8_retStr[u8_index]);
  e4:	87 01       	movw	r16, r14
  e6:	0c 0f       	add	r16, r28
  e8:	11 1d       	adc	r17, r1
  ea:	c8 01       	movw	r24, r16
  ec:	0e 94 49 00 	call	0x92	; 0x92 <UART_receiveChar>
		if('\0'==u8_retStr[u8_index] ||'\n'==u8_retStr[u8_index] ||'\r'==u8_retStr[u8_index])
  f0:	f8 01       	movw	r30, r16
  f2:	80 81       	ld	r24, Z
  f4:	88 23       	and	r24, r24
  f6:	21 f0       	breq	.+8      	; 0x100 <UART_receiveString+0x2c>
  f8:	8a 30       	cpi	r24, 0x0A	; 10
  fa:	11 f0       	breq	.+4      	; 0x100 <UART_receiveString+0x2c>
  fc:	8d 30       	cpi	r24, 0x0D	; 13
  fe:	19 f4       	brne	.+6      	; 0x106 <UART_receiveString+0x32>
		{
			u8_retStr[u8_index]='\0';
 100:	f8 01       	movw	r30, r16
 102:	10 82       	st	Z, r1
			break;
 104:	03 c0       	rjmp	.+6      	; 0x10c <UART_receiveString+0x38>
		}
		else
		{
			u8_index++;
 106:	cf 5f       	subi	r28, 0xFF	; 255
	}
}
void UART_receiveString(uint8_t* u8_retStr)
{
	uint8_t u8_index=0;
	while(u8_index<255)
 108:	cf 3f       	cpi	r28, 0xFF	; 255
 10a:	61 f7       	brne	.-40     	; 0xe4 <UART_receiveString+0x10>
		else
		{
			u8_index++;
		}
	}
 10c:	cf 91       	pop	r28
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
 112:	ff 90       	pop	r15
 114:	ef 90       	pop	r14
 116:	08 95       	ret

00000118 <main>:
#include "./01-LIB/Registers.h"
#include "./02-MCAL/UART/UART_interface.h"
#include <string.h>

int main(void)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	cf 5f       	subi	r28, 0xFF	; 255
 122:	d1 09       	sbc	r29, r1
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_val[255];
	UART_init();
 12e:	0e 94 41 00 	call	0x82	; 0x82 <UART_init>
	PORTB_DIR=(1<<4)|(1<<5)|(1<<6);
 132:	80 e7       	ldi	r24, 0x70	; 112
 134:	87 bb       	out	0x17, r24	; 23
    /* Replace with your application code */
    while (1) 
    {
		UART_sendString("ENTER A STRING : ");
 136:	80 e6       	ldi	r24, 0x60	; 96
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_sendString>
		UART_receiveString(u8_val);
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_receiveString>
		UART_sendString(u8_val);
 146:	ce 01       	movw	r24, r28
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_sendString>
		if(strcmp(u8_val,"START")==0)
 14e:	62 e7       	ldi	r22, 0x72	; 114
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	ce 01       	movw	r24, r28
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strcmp>
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <main+0x4c>
		{
			PORTB_DATA=1<<4;
 15e:	80 e1       	ldi	r24, 0x10	; 16
 160:	88 bb       	out	0x18, r24	; 24
 162:	2a c0       	rjmp	.+84     	; 0x1b8 <main+0xa0>
		}
		else if(strcmp(u8_val,"WAIT")==0)
 164:	68 e7       	ldi	r22, 0x78	; 120
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	ce 01       	movw	r24, r28
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strcmp>
 170:	89 2b       	or	r24, r25
 172:	19 f4       	brne	.+6      	; 0x17a <main+0x62>
		{
			PORTB_DATA=1<<5;
 174:	80 e2       	ldi	r24, 0x20	; 32
 176:	88 bb       	out	0x18, r24	; 24
 178:	1f c0       	rjmp	.+62     	; 0x1b8 <main+0xa0>
		}
		else if(strcmp(u8_val,"STOP")==0)
 17a:	6d e7       	ldi	r22, 0x7D	; 125
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	ce 01       	movw	r24, r28
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strcmp>
 186:	89 2b       	or	r24, r25
 188:	19 f4       	brne	.+6      	; 0x190 <main+0x78>
		{
			PORTB_DATA=1<<6;
 18a:	80 e4       	ldi	r24, 0x40	; 64
 18c:	88 bb       	out	0x18, r24	; 24
 18e:	14 c0       	rjmp	.+40     	; 0x1b8 <main+0xa0>
		}
		else if(strcmp(u8_val,"AT")==0)
 190:	62 e8       	ldi	r22, 0x82	; 130
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	ce 01       	movw	r24, r28
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strcmp>
 19c:	89 2b       	or	r24, r25
 19e:	59 f4       	brne	.+22     	; 0x1b6 <main+0x9e>
		{
			UART_sendChar('\n');
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	0e 94 4f 00 	call	0x9e	; 0x9e <UART_sendChar>
			UART_sendChar('\r');
 1a6:	8d e0       	ldi	r24, 0x0D	; 13
 1a8:	0e 94 4f 00 	call	0x9e	; 0x9e <UART_sendChar>
			UART_sendString("OK");
 1ac:	85 e8       	ldi	r24, 0x85	; 133
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_sendString>
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <main+0xa0>
		}
		else
		{
			PORTB_DATA=0;
 1b6:	18 ba       	out	0x18, r1	; 24
		}
		UART_sendChar('\n');
 1b8:	8a e0       	ldi	r24, 0x0A	; 10
 1ba:	0e 94 4f 00 	call	0x9e	; 0x9e <UART_sendChar>
		UART_sendChar('\r');
 1be:	8d e0       	ldi	r24, 0x0D	; 13
 1c0:	0e 94 4f 00 	call	0x9e	; 0x9e <UART_sendChar>
    }
 1c4:	b8 cf       	rjmp	.-144    	; 0x136 <main+0x1e>

000001c6 <strcmp>:
 1c6:	fb 01       	movw	r30, r22
 1c8:	dc 01       	movw	r26, r24
 1ca:	8d 91       	ld	r24, X+
 1cc:	01 90       	ld	r0, Z+
 1ce:	80 19       	sub	r24, r0
 1d0:	01 10       	cpse	r0, r1
 1d2:	d9 f3       	breq	.-10     	; 0x1ca <strcmp+0x4>
 1d4:	99 0b       	sbc	r25, r25
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
